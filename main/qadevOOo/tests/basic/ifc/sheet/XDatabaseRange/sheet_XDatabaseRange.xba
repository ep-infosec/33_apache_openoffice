<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="sheet_XDatabaseRange" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************





' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.sheet.XDatabaseRange
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oldDA, oSD, oFD, oID, oSTD As Object
    Dim newDA As New com.sun.star.table.CellRangeAddress

    Test.StartMethod("getDataArea()")
    Test.StartMethod("setDataArea()")
    bOK = true
    oldDA = oObj.getDataArea()
    newDA.Sheet = 0
    newDA.StartColumn = 5
    newDA.StartRow = 6
    newDA.EndColumn = 10
    newDA.EndRow = 8
    oObj.setDataArea(newDA)
    bOK = bOK AND oObj.getDataArea().Sheet = newDA.Sheet
    bOK = bOK AND oObj.getDataArea().StartColumn = newDA.StartColumn
    bOK = bOK AND oObj.getDataArea().StartRow = newDA.StartRow
    bOK = bOK AND oObj.getDataArea().EndColumn = newDA.EndColumn
    bOK = bOK AND oObj.getDataArea().EndRow = newDA.EndRow
    oObj.setDataArea(oldDA)
    Test.MethodTested("getDataArea()", bOK)
    Test.MethodTested("setDataArea()", bOK)

    Test.StartMethod("getSortDescriptor()")
    bOK = true
    oSD = oObj.getSortDescriptor()
    bOK = bOK AND isArray(oSD)
    Test.MethodTested("getSortDescriptor()", bOK)

    Test.StartMethod("getFilterDescriptor()")
    bOK = true
    oFD = oObj.getFilterDescriptor()
    bOK = bOK AND hasUnoInterfaces(oFD, "com.sun.star.sheet.XSheetFilterDescriptor")
    Test.MethodTested("getFilterDescriptor()", bOK)

    Test.StartMethod("getSubTotalDescriptor()")
    bOK = true
    oSTD = oObj.getSubTotalDescriptor()
    bOK = bOK AND hasUnoInterfaces(oSTD, "com.sun.star.sheet.XSubTotalDescriptor")
    Test.MethodTested("getSubTotalDescriptor()", bOK)

    Test.StartMethod("getImportDescriptor()")
    bOK = true
    oID = oObj.getImportDescriptor()
    bOK = bOK AND isArray(oID)
    Test.MethodTested("getImportDescriptor()", bOK)

    Test.StartMethod("refresh()")
    bOK = true
    oObj.refresh()
    Test.MethodTested("refresh()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
