<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="sheet_XSpreadsheets" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************





' Be sure that all variables are dimensioned:
option explicit

'*************************************************************************
' This Interface/Service test depends on the following GLOBAL variables,
' which must be specified in the object creation:

'     - Global nGlobalLong As Long the number of sheets

'*************************************************************************






Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.sheet.XSpreadsheets
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim l As Integer
    Dim sname As String
    Dim oSheet1, oSheet2 As Object


    Test.StartMethod("insertNewByName()")
    bOK = true
    for l = 1 to nGlobalLong
        sname = cIfcShortName &amp; CStr(l)
        oObj.insertNewByName(sname, l)
        oSheet1 = oObj.getByName(sname)
        oSheet2 = oObj.getByIndex(l)
        bOK = bOK AND NOT isNull(oSheet1)
        bOK = bOK AND NOT isNull(oSheet2)
        if (bOK) then
            bOK = bOK and oSheet1.name = oSheet2.name
        end if
    next l
    Test.MethodTested("insertNewByName()", bOK)

    Test.StartMethod("copyByName()")
    bOK = true
    l = 1
    sname = cIfcShortName &amp; "COPY"
    oObj.copyByName(cIfcShortName &amp; CStr(l), sname, l )
    oSheet1 = oObj.getByName(sname)
    oSheet2 = oObj.getByIndex(l)
    bOK = bOK AND NOT isNull(oSheet1)
    bOK = bOK AND NOT isNull(oSheet2)
    if (bOK) then
        bOK = bOK AND oSheet1.name = oSheet2.name
    end if
    Test.MethodTested("copyByName()", bOK)

    Test.StartMethod("moveByName()")
    bOK = true
    l = 1
    sname = cIfcShortName &amp; "2"
    oObj.moveByName(sname, l)
    oSheet1 = oObj.getByName(sname)
    oSheet2 = oObj.getByIndex(l)
    bOK = bOK AND NOT isNull(oSheet1)
    bOK = bOK AND NOT isNull(oSheet2)
    if (bOK) then
        bOK = bOK AND oSheet1.name = oSheet2.name
    end if
    Out.Log(cIfcShortName &amp; ":" &amp; "#1 - " &amp; bOK)

    sname = cIfcShortName &amp; "COPY"
    l = nGlobalLong + 1
    oObj.moveByName(sname, l)
    l = l - 1
    oSheet1 = oObj.getByName(sname)
    oSheet2 = oObj.getByIndex(l)
    bOK = bOK AND NOT isNull(oSheet1)
    bOK = bOK AND NOT isNull(oSheet2)
    if (bOK) then
        bOK = bOK and oSheet1.name =oSheet2.name
    end if
    Test.MethodTested("moveByName()", bOK)

    nGlobalLong = nGlobalLong * 2 + 1 ' nGlobalLong : 3 default sheets where already there
                                      ' nGlobalLong have been inserted
                                      ' + 1 has been created by Copy
Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
