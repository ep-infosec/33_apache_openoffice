<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="io_XInputStream" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************







Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.io.XInputStream
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim Bytes(10) As Integer
    Dim rBytes(10) As Integer
    Dim oOutputStream As Object
    Dim i As Integer
    Dim nRead As Integer

    Out.Log("First writeBytes()...")
    bOK = true

    for i = 0 to ubound(Bytes())
        Bytes(i) = i
    next i

    oOutputStream = getOutStream()
    oOutputStream.writeBytes(Bytes())

    if (cObjectName &lt;&gt; "stm.Pipe") then ResetStreams()

    Test.StartMethod("readBytes()")
    bOK = true
    nRead = oObj.readBytes(Bytes(), 5)
    bOK = bOK AND nRead = 5
    for i = 0 to 4
        Out.Log("Expected " &amp; i &amp; ", actual is " &amp; int(Bytes(i)))
        bOK = bOK AND Bytes(i) = i
    next i
    Test.MethodTested("readBytes()", bOK)

    Test.StartMethod("skipBytes()")
    bOK = true
    oObj.skipBytes(2)
    nRead = oObj.readBytes(Bytes(), 2)
    Out.Log("Expected " &amp; 7 &amp; ", actual is " &amp; int(Bytes(0)))
    bOK = bOK AND Bytes(0) = 7
    Test.MethodTested("skipBytes()", bOK)

    Test.StartMethod("available()")
    bOK = true
    iAvail = oObj.available()
    Out.Log("bytes available without blocking: " &amp; iAvail)
    bOK = bOK AND iAvail &gt;= 0
    Test.MethodTested("available()", bOK)

    Test.StartMethod("readSomeBytes()")
    bOK = true
    nRead = oObj.readSomeBytes(Bytes(), 10)
    Out.Log("Can read " &amp; nRead &amp; " bytes.")
    for i = 0 to ubound(Bytes())
        Out.Log(int(Bytes(i)))
    next i
    bOK = bOK AND ubound(Bytes()) = 1
    bOK = bOK AND nRead = 2
    bOK = bOK AND Bytes(0) = 9
    bOK = bOK AND Bytes(1) = 10
    Test.MethodTested("readSomeBytes()", bOK)

    Test.StartMethod("closeInput()")
    bOK = true
    Out.Log("This method is called in main module.")
    Test.MethodTested("closeInput()", bOK)

    ResetStreams()

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
