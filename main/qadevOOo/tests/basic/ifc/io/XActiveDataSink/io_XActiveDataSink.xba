<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="io_XActiveDataSink" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************





' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.io.XActiveDataSink
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oIS As Object, oPipe As Object, oGetPipe As Object
    Dim aData As Variant, aGetData As Variant
    Dim bytesRead As Variant

    ResetStreams()
    Test.StartMethod("getInputStream()")
    bOK = true
    oIS = oObj.getInputStream()
    bOK = bOK AND hasUnoInterfaces(oIS, "com.sun.star.io.XInputStream")
    Test.MethodTested("getInputStream()", bOK)

    Test.StartMethod("setInputStream()")
    bOK = true
    oPipe = createUnoService("com.sun.star.io.Pipe")
    aData = Array(23, 65, 32, 119)
    oPipe.writeBytes(aData)
    oObj.setInputStream(oPipe)
    oGetPipe = oObj.getInputStream()
    aGetData = dimArray(ubound(aData())
    bytesRead = oGetPipe.readBytes(aGetData(), ubound(aData()) + 1)
    Out.Log("Reading bytes: " + bytesRead)
    
    bOK = bOK AND cmpArrays(aData, aGetData)
    
    Out.Log("Setting old input stream ...")
    oObj.setInputStream(oIS)
    
    Test.MethodTested("setInputStream()", bOK)
Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub

Function cmpArrays(arr1 As Variant, arr2 As Variant) As Boolean
On Error Goto ErrHndl
    Dim bRet As Boolean
    Dim i As Integer
    
    bRet = true
    if (isNull(arr1) OR isNull(arr2)) then 
        bRet = false
        Out.Log("One of arrays is null")
    else
        if (ubound(arr1()) &lt;&gt; ubound(arr2())) then
            Out.Log("UBOUND of 1st array is " + ubound(arr1()) + _
                "UBOUND of 2nd array is " + ubound(arr2()))
            bRet = false
        else
            for i = 0 to ubound(arr1()) 
                Out.Log("(" + i + "): " + arr1(i) + "-" + arr2(i))
                bRet = bRet AND (arr1(i) = arr2(i))
            next i
        end if
    end if
    
    cmpArrays() = bRet
exit Function
ErrHndl:
    Test.Exception()
    cmpArrays() = false
End Function
</script:module>
