<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="awt_XTimeField" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************





' Be sure that all variables are dimensioned:
option explicit



Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.awt.XTimeField
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oldVal, newVal As Variant

    Test.StartMethod("getTime()")
    Test.StartMethod("setTime()")
    bOK = true
    oldVal = oObj.getTime()
    Out.Log("value before: "+oldVal)
    oObj.setTime(oldVal+20)
    newVal = oObj.getTime()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setTime()", bOK)
    Test.MethodTested("getTime()", bOK)

    Test.StartMethod("getMin()")
    Test.StartMethod("setMin()")
    bOK = true
    oldVal = oObj.getMin()
    Out.Log("value before: "+oldVal)
    oObj.setMin(oldVal+20)
    newVal = oObj.getMin()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setMin()", bOK)
    Test.MethodTested("getMin()", bOK)

    Test.StartMethod("getMax()")
    Test.StartMethod("setMax()")
    bOK = true
    oldVal = oObj.getMax()
    Out.Log("value before: "+oldVal)
    oObj.setMax(oldVal+20)
    newVal = oObj.getMax()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setMax()", bOK)
    Test.MethodTested("getMax()", bOK)

    Test.StartMethod("getFirst()")
    Test.StartMethod("setFirst()")
    bOK = true
    oldVal = oObj.getFirst()
    Out.Log("value before: "+oldVal)
    oObj.setFirst(oldVal+20)
    newVal = oObj.getFirst()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setFirst()", bOK)
    Test.MethodTested("getFirst()", bOK)

    Test.StartMethod("getLast()")
    Test.StartMethod("setLast()")
    bOK = true
    oldVal = oObj.getLast()
    Out.Log("value before: "+oldVal)
    oObj.setLast(oldVal+20)
    newVal = oObj.getLast()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setLast()", bOK)
    Test.MethodTested("getLast()", bOK)


    Test.StartMethod("isEmpty()")
    Test.StartMethod("setEmpty()")
    bOK = true
    oldVal = oObj.isEmpty()
    if ( NOT oldVal) then
        oObj.setEmpty()        
        bOK = oObj.isEmpty()
    endif
    Test.MethodTested("setEmpty()", bOK)
    Test.MethodTested("isEmpty()", bOK)

    Test.StartMethod("isStrictFormat()")
    Test.StartMethod("setStrictFormat()")
    bOK = true
    oldVal = oObj.isStrictFormat()
    Out.Log("value before: "+oldVal)
    if (oldVal) then
        oObj.setStrictFormat(false)
    else
        oObj.setStrictFormat(true)
    endif
    newVal = oObj.isStrictFormat()
    Out.Log("value after: "+newVal)
    bOK = bOK AND (oldVal &lt;&gt; newVal)
    Test.MethodTested("setStrictFormat()", bOK)
    Test.MethodTested("isStrictFormat()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
</script:module>
