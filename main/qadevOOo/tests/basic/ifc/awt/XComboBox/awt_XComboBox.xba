<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="awt_XComboBox" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************





' Be sure that all variables are dimensioned:
option explicit


Dim bIL_itemStateChanged, bAL_actionPerformed As Boolean


Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.awt.XComboBox
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oIListener, oAListener As Object

    bIL_itemStateChanged = False
    oIListener = createUnoListener("IL_", "com.sun.star.awt.XItemListener")

    Test.StartMethod("addItemListener()")
    oObj.addItemListener(oIListener)
    bOK = True
    Test.MethodTested("addItemListener()", bOK)

    Test.StartMethod("removeItemListener()")
    oObj.removeItemListener(oIListener)
    bOK = True
    Test.MethodTested("removeItemListener()", bOK)

    bAL_actionPerformed = False
    oAListener = createUnoListener("AL_", "com.sun.star.awt.XActionListener")
    Test.StartMethod("addActionListener()")
    oObj.addActionListener(oAListener)
    bOK = True
    Test.MethodTested("addActionListener()", bOK)

    Test.StartMethod("removeActionListener()")
    oObj.removeActionListener(oAListener)
    bOK = True
    Test.MethodTested("removeActionListener()", bOK)

    Dim itemCount As Integer
    Test.StartMethod("getItemCount()")
    itemCount = oObj.getItemCount()
    bOK = itemCount &gt; 0 or itemCount = 0
    Test.MethodTested("getItemCount()", bOK)

    Test.StartMethod("addItem()")
    oObj.addItem("Item1", itemCount)
    bOK = oObj.getItemCount() = (itemCount + 1)
    Test.MethodTested("addItem()", bOK)

    Dim itemNames As Variant
    itemNames = Array("Item2", "Item3")
    Dim oldCount As Integer
    oldCount = oObj.getItemCount()
    Test.StartMethod("addItems()")
    oObj.addItems(itemNames(), oldCount)
    bOK = (oldCount + 2) = oObj.getItemCount()
    Test.MethodTested("addItems()", bOK)

    Test.StartMethod("getItem()")
    bOK = (oObj.getItem(itemCount) = "Item1")
    Test.MethodTested("getItem()", bOK)

    Test.StartMethod("getItems()")
    itemNames = oObj.getItems()
    Dim i As Integer
    bOK = True
    Dim iname As String
    For i = itemCount to itemCount + 2
        iname = "Item" + (i + 1)
        bOK = bOK and itemNames(i) = iname
        out.log(iname + "   " + itemNames(i))
    Next i
    Test.MethodTested("getItems()", bOK)

    Test.StartMethod("removeItems()")
    oObj.removeItems(0, oObj.getItemCount())
    bOK = oObj.getItemCount = 0
    Test.MethodTested("removeItems()", bOK)

    Dim lineCount As Integer
    Test.StartMethod("getDropDownLineCount()")
    lineCount = oObj.getDropDownLineCount()
    bOK = True
    Test.MethodTested("getDropDownLineCount()", bOK)

    Test.StartMethod("setDropDownLineCount()")
    oObj.setDropDownLineCount(lineCount + 1)
    bOK = oObj.getDropDownLineCount() = lineCount + 1
    Test.MethodTested("setDropDownLineCount()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub

Sub IL_itemStateChanged
    Out.Log("CallBack for ItemListener itemStateChanged was called.")
    bIL_itemStateChanged = true
End Sub

Sub AL_actionPerformed
    Out.Log("CallBack for ActionListener actionPerformed was called.")
    bAL_actionPerformed = true
End Sub
</script:module>
