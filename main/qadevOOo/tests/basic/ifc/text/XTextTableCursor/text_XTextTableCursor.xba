<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="text_XTextTableCursor" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************







Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.text.XTextTableCursor
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean

    Test.StartMethod("gotoStart()")
    bOK = true
    oObj.gotoStart(false)
    bOK = bOK AND Expected("A1")
    Test.MethodTested("gotoStart()", bOK)

    Test.StartMethod("getRangeName()")
    bOK = true
    cName = oObj.getRangeName()
    bOK = bOK AND NOT isNULL(cName)
    Test.MethodTested("getRangeName()", bOK)

    Test.StartMethod("gotoCellByName()")
    bOK = true
    bOK = bOK AND oObj.gotoCellByName("B2", true)
    bOK = bOK AND Expected("A1:B2")
    Test.MethodTested("gotoCellByName()", bOK)

    Test.StartMethod("goLeft()")
    bOK = true
    bOK = bOK AND oObj.goLeft(1, false)
    bOK = bOK AND Expected("A2")
    Test.MethodTested("goLeft()", bOK)

    Test.StartMethod("goRight()")
    bOK = true
    bOK = bOK AND oObj.goRight(3, true)
    bOK = bOK AND Expected("A2:D2")
    Test.MethodTested("goRight()", bOK)

    Test.StartMethod("goUp()")
    bOK = true
    bOK = bOK AND oObj.goUp(1, true)
    bOK = bOK AND Expected("A2:D1")
    Test.MethodTested("goUp()", bOK)

    Test.StartMethod("goDown()")
    bOK = true
    bOK = bOK AND oObj.goDown(3, false)
    bOK = bOK AND Expected("D4")
    Test.MethodTested("goDown()", bOK)

    Test.StartMethod("gotoEnd()")
    bOK = true
    oObj.gotoEnd(true)
    bOK = bOK AND Expected("D4:E5")
    Test.MethodTested("gotoEnd()", bOK)

    Test.StartMethod("mergeRange()")
    bOK = true
    oObj.gotoStart(false)
    oObj.gotoEnd(true)
    bOK = bOK AND oObj.mergeRange()
    bOK = bOK AND Expected("A1")
    Test.MethodTested("mergeRange()", bOK)

    Test.StartMethod("splitRange()")
    bOK = true
    bOK = bOK AND oObj.splitRange(3, true)
    oObj.gotoEnd(true)
    bOK = bOK AND Expected("A1.1.1:A1.1.4")
	oObj.gotoStart(false)
    bOK = bOK AND oObj.splitRange(2, false)
    oObj.goRight(2, true)
    bOK = bOK AND Expected("A1.1.1:A1.3.1")
    Test.MethodTested("splitRange()", bOK)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
Function Expected(cName As String) As Boolean
	Dim bOK As Boolean
	Dim cRangeName As String
	Dim cAltName As String
	Dim dPos As Integer

	cRangeName = oObj.getRangeName()

	dPos = inStr(1, cName, ":")
	if (dPos &gt; 0) then
		cAltName = Mid(cName, dPos + 1) &amp; ":" &amp; Left(cName, dPos - 1)
		bOK = (cRangeName = cName) OR (cAltName = cRangeName)
	else
		bOK = cRangeName = cName
	end if

	if (NOT bOK) then
		Out.Log("Expected RangeName is '" &amp; cName &amp; "' and actual is '" &amp; cRangeName &amp; "'")
	end if

	Expected() = bOK
End Function
</script:module>
