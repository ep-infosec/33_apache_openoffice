<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="form_XReset" script:language="StarBasic">


'*************************************************************************
'
'  Licensed to the Apache Software Foundation (ASF) under one
'  or more contributor license agreements.  See the NOTICE file
'  distributed with this work for additional information
'  regarding copyright ownership.  The ASF licenses this file
'  to you under the Apache License, Version 2.0 (the
'  "License"); you may not use this file except in compliance
'  with the License.  You may obtain a copy of the License at
'  
'    http://www.apache.org/licenses/LICENSE-2.0
'  
'  Unless required by applicable law or agreed to in writing,
'  software distributed under the License is distributed on an
'  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
'  KIND, either express or implied.  See the License for the
'  specific language governing permissions and limitations
'  under the License.
'
'*************************************************************************





Dim nCB1Val as Integer, nCB2Val As Integer


Sub RunTest()

'*************************************************************************
' INTERFACE: 
' com.sun.star.form.XReset
'*************************************************************************
On Error Goto ErrHndl
    Dim bOK As Boolean
    Dim oListener1 as Object, oListener2 As Object
    Dim nCount As Integer

    bOK = true
    nCount = 0  'oCollection.count
    nCB1Val = 0
    nCB2Val = 0

    Out.Log("create two listeners...")
    oListener1 = createUNOListener("CB1_", "com.sun.star.form.XResetListener")
    oListener2 = createUNOListener("CB2_", "com.sun.star.form.XResetListener")

    ' add listeners to objectif initialized
    if NOT (isNull(oListener1)) then
        oObj.addResetListener(oListener1)
    end if
    if NOT (isNull(oListener2)) then
        oObj.addResetListener(oListener2)
    end if


    Test.StartMethod("addResetListener()")
    oObj.reset()
    wait(1000)
    bOK = bOK AND (nCB1Val = 1) AND (nCB2Val = 1)
    Test.MethodTested("addResetListener()", bOK)

    Test.StartMethod("removeResetListener()")
    Out.Log("removing Listener 2")
    oObj.removeResetListener(oListener2)
    oObj.reset()
    wait(1000)
    bOK = bOK AND (nCB1Val = 2) AND (nCB2Val = 1)
    Test.MethodTested("removeResetListener()", bOK)

    Test.StartMethod("reset()")
    bOK = bOK AND (nCB1Val = 2) AND (nCB2Val = 1)
    Test.MethodTested("reset()", bOK)

    Out.Log("removing Listener 1")
    oObj.removeResetListener(oListener1)

Exit Sub
ErrHndl:
    Test.Exception()
    bOK = false
    resume next
End Sub
' callback routine called resetting for listener1
Sub CB1_resetted
    Out.Log("Callback CB1 resetted")
    nCB1Val = nCB1Val + 1
End Sub' callback routine called resetting for listener2

Sub CB2_resetted
    Out.Log("Callback CB2 resetted")
    nCB2Val = nCB2Val + 1
End Sub

' callback routine is invoked before resetting a component.
Function CB1_approveReset() as Boolean
    Out.Log("Callback CB1 approve Reset")
    CB1_approveReset = true
end Function

Function CB2_approveReset() as Boolean
    Out.Log("Callback CB2 approve Reset")
    CB2_approveReset = true
end Function
</script:module>
