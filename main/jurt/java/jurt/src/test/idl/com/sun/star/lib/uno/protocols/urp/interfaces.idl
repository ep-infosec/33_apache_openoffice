/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_beans_XPropertySet_idl_
#include <com/sun/star/beans/XPropertySet.idl>
#endif

#ifndef __com_sun_star_uno_Exception_idl__
#include <com/sun/star/uno/Exception.idl>
#endif

#ifndef __com_sun_star_uno_Exception_idl__
#include <com/sun/star/uno/Any.idl>
#endif


module com { module sun { module star { module lib { module uno {
module protocols { module urp {

	struct TestPrimitiveStruct {
		boolean        zBool;
		short          zShort;
		unsigned short zUShort;
		long           zLong;
		unsigned long  zULong;
		hyper          zHyper;
		unsigned hyper zUHyper;
		float          zFloat;
		double         zDouble;
		char           zChar;
		byte           zByte;
		string         zString;
		any            zAny;
	};

	struct TestPrimitiveSeqStruct {
		sequence<boolean>        zBool;
		sequence<short>          zShort;
		sequence<unsigned short> zUShort;
		sequence<long>           zLong;
		sequence<unsigned long>  zULong;
		sequence<hyper>          zHyper;
		sequence<unsigned hyper> zUHyper;
		sequence<float>          zFloat;
		sequence<double>         zDouble;
		sequence<char>           zChar;
		sequence<byte>           zByte;
		sequence<string>         zString;
		sequence<any>            zAny;
	};

	struct TestNestedStruct {
		TestPrimitiveStruct    primitiveStruct;
		TestPrimitiveSeqStruct primitiveSeqStruct;
	};

	struct TestNestedSeqStruct {
		sequence< sequence< long > > val;
	};

	interface TestXInterface : com::sun::star::uno::XInterface {
		void method1([in] com::sun::star::uno::XInterface itf) raises( com::sun::star::uno::Exception );
		void method2([out] com::sun::star::uno::XInterface itf) raises( com::sun::star::uno::Exception );
		void method3([inout] com::sun::star::uno::XInterface itf) raises( com::sun::star::uno::Exception );
		com::sun::star::uno::XInterface method4() raises( com::sun::star::uno::Exception );

		any returnAny() raises( com::sun::star::uno::Exception );

		void  method() raises( com::sun::star::uno::Exception );
		void  methodWithInParameter([in] string text) raises( com::sun::star::uno::Exception );
		void  methodWithOutParameter([out] string text) raises( com::sun::star::uno::Exception );
		void  methodWithInOutParameter([inout] string text) raises( com::sun::star::uno::Exception );
		string  methodWithResult() raises( com::sun::star::uno::Exception );

		string MethodWithIn_Out_InOut_Paramters_and_result([in] string text, [out] string outtext, [inout] string inouttext) raises( com::sun::star::uno::Exception );
	};

	struct TestInterfaceStruct 
	{
		com::sun::star::uno::XInterface hallo;

		com::sun::star::beans::XPropertySet hallo2;
	};

	enum TestEnum {
		A = 7,
		B = 8,
		C = 11
	};

}; }; }; }; }; }; };
