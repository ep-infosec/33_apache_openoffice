/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/


#include <com/sun/star/corba/corba.idl>
module com { module sun { module star { module corba { module iop
{ // IDL
	
    /**
      @deprecated
     */
	published typedef unsigned long ProfileId;

    /**
      @deprecated
     */
    published constants ProfileIdGroup
		{
			const ProfileId TAG_INTERNET_IOP = 0;
			const ProfileId TAG_MULTIPLE_COMPONENTS = 1;
		};

    /**
      @deprecated
     */
    published struct TaggedProfile
	{
		ProfileId tag;
		sequence <byte> profile_data;
	};
    // an Interoperable Object Reference is a sequence of
    // object-specific protocol profiles, plus a type ID.

    /**
      @deprecated
     */
    published struct IOR
	{
		CorbaString8 type_id;
		sequence <TaggedProfile> profiles;
	};

    // Standard way of representing multicomponent profiles.
    // This would be encapsulated in a TaggedProfile.
    /**
      @deprecated
     */
	published typedef unsigned long ComponentId;

    /**
      @deprecated
     */
    published struct TaggedComponent
	{
		ComponentId tag;
		sequence <byte> component_data;
	};

    /**
      @deprecated
     */
	published typedef sequence <TaggedComponent> MultipleComponentProfile;

    /**
      @deprecated
     */
	published typedef unsigned long ServiceId;

    /**
      @deprecated
     */
    published struct ServiceContext
	{
		ServiceId context_id;
		sequence < byte > context_data;
	};
	
    /**
      @deprecated
     */
	published typedef sequence <ServiceContext> ServiceContextList;

    /**
      @deprecated
     */
    published constants ServiceIdGroup
		{
			const ServiceId TransactionService = 0;
			const ServiceId CodeSets = 1;
			const ServiceId ChainBypassCheck = 2;
			const ServiceId ChainBypassInfo = 3;
			const ServiceId LogicalThreadId = 4;
			const ServiceId BI_DIR_IIOP = 5;
			const ServiceId SendingContextRunTime = 6;
			const ServiceId INVOCATION_POLICIES = 7;
			const ServiceId FORWARDED_IDENTITY = 8;
			const ServiceId UnknownExceptionInfo = 9;
		};

}; }; }; }; };

