/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/



// autogenerated file with codegen.pl

#include "preextstl.h"
#include "gtest/gtest.h"
#include "postextstl.h"

#include <basegfx/vector/b2isize.hxx>
#include <basegfx/point/b2ipoint.hxx>
#include <basegfx/range/b2drange.hxx>
#include <basegfx/range/b2irange.hxx>
#include <basegfx/polygon/b2dpolygon.hxx>
#include <basegfx/polygon/b2dpolygontools.hxx>
#include <basegfx/polygon/b2dpolypolygon.hxx>
#include <basegfx/polygon/b2dpolypolygontools.hxx>

#include <basebmp/color.hxx>
#include <basebmp/scanlineformats.hxx>
#include <basebmp/bitmapdevice.hxx>
#include <basebmp/debug.hxx>
#include "tools.hxx"

#include <iostream>
#include <fstream>

using namespace ::basebmp;

namespace
{
/*
  std::ofstream output("32bpp_test.dump");
  debugDump( mpDevice32bpp, output );
*/

class ClipTest : public ::testing::Test
{
protected:
    BitmapDeviceSharedPtr mpClipMask;
    BitmapDeviceSharedPtr mpDevice1bpp;
    BitmapDeviceSharedPtr mpDevice32bpp;

    void implTestPixelClip(const BitmapDeviceSharedPtr& rDevice)
    {
        const Color aBgCol(0);
        rDevice->clear(aBgCol);

        const basegfx::B2IPoint aPt(0,0);
        const Color aCol(0xFFFFFFFF);
        rDevice->setPixel( aPt, aCol, DrawMode_PAINT, mpClipMask );
        ASSERT_TRUE(rDevice->getPixel(aPt) == aBgCol) << "get/setPixel clip #1";

        const basegfx::B2IPoint aPt2(10,10);
        rDevice->setPixel( aPt2, aCol, DrawMode_PAINT, mpClipMask );
        ASSERT_TRUE(rDevice->getPixel(aPt2) == aBgCol) << "get/setPixel clip #2";

        const basegfx::B2IPoint aPt1(10,0);
        rDevice->setPixel( aPt1, aCol, DrawMode_PAINT, mpClipMask );
        ASSERT_TRUE(rDevice->getPixel(aPt1) != aBgCol) << "get/setPixel clip #3";

        const basegfx::B2IPoint aPt3(0,10);
        rDevice->setPixel( aPt3, aCol, DrawMode_PAINT, mpClipMask );
        ASSERT_TRUE(rDevice->getPixel(aPt3) != aBgCol) << "get/setPixel clip #4";
    }

    void implTestLineClip(const BitmapDeviceSharedPtr& rDevice)
    {
        const Color aBgCol(0);
        rDevice->clear(aBgCol);

        const basegfx::B2IPoint aPt1(0,0);
        const basegfx::B2IPoint aPt2(1,9);
        const Color aCol(0xFFFFFFFF);
        rDevice->drawLine( aPt1, aPt2, aCol, DrawMode_PAINT, mpClipMask );

        const basegfx::B2IPoint aPt3(1,5);
        ASSERT_TRUE(rDevice->getPixel(aPt3) != aBgCol) << "get line pixel";
        ASSERT_TRUE(countPixel( rDevice, rDevice->getPixel(aPt3) ) == 4)
            << "number of rendered line pixel is not 4";

        rDevice->drawLine( aPt1, aPt2, aCol, DrawMode_XOR, mpClipMask );
        ASSERT_TRUE(countPixel( rDevice, rDevice->getPixel(aPt3) ) == 121)
            << "number of xor-rendered line pixel is not 0";
    }

    void implTestFillClip(const BitmapDeviceSharedPtr& rDevice)
    {
        rDevice->clear(Color(0));

        const basegfx::B2DRange aAllOver(-10,-10,20,20);
        const Color aCol(0xFFFFFFFF);
        rDevice->fillPolyPolygon( basegfx::B2DPolyPolygon(
                                      basegfx::tools::createPolygonFromRect(aAllOver)),
                                  aCol,
                                  DrawMode_PAINT,
                                  mpClipMask );
        const basegfx::B2IPoint aPt(0,10);
        ASSERT_TRUE(countPixel( rDevice, rDevice->getPixel(aPt) ) == 121-30)
            << "number of clipped pixel is not 30";

        rDevice->fillPolyPolygon( basegfx::B2DPolyPolygon(
                                      basegfx::tools::createPolygonFromRect(aAllOver)),
                                  aCol,
                                  DrawMode_PAINT );
        ASSERT_TRUE(countPixel( rDevice, rDevice->getPixel(aPt) ) == 121)
            << "number of filled pixel is not 121";

        rDevice->fillPolyPolygon( basegfx::B2DPolyPolygon(
                                      basegfx::tools::createPolygonFromRect(aAllOver)),
                                  aCol,
                                  DrawMode_XOR,
                                  mpClipMask );
        ASSERT_TRUE(countPixel( rDevice, rDevice->getPixel(aPt) ) == 121-30)
            << "number of xor-cleared pixel is not 91";
    }

    void implTestBmpClip(const BitmapDeviceSharedPtr& rDevice)
    {
        BitmapDeviceSharedPtr pBmp( cloneBitmapDevice(
                                        basegfx::B2IVector(3,3),
                                        rDevice ));
        Color aCol1(0);
        Color aCol2(0xFFFFFFFF);
        pBmp->clear(aCol1);
        pBmp->setPixel(basegfx::B2IPoint(0,0),aCol2,DrawMode_PAINT);
        pBmp->setPixel(basegfx::B2IPoint(1,1),aCol2,DrawMode_PAINT);
        pBmp->setPixel(basegfx::B2IPoint(2,2),aCol2,basebmp::DrawMode_PAINT);

        rDevice->clear(aCol1);
        rDevice->drawBitmap(pBmp,
                            basegfx::B2IRange(0,0,3,3),
                            basegfx::B2IRange(-1,-1,4,4),
                            DrawMode_PAINT,
                            mpClipMask);

        const basegfx::B2IPoint aPt(1,1);
        ASSERT_TRUE(countPixel( rDevice, rDevice->getPixel(aPt) ) == 5)
            << "number of clipped pixel is not 5";
    }

    void implTestMaskColorClip(const BitmapDeviceSharedPtr& rDevice)
    {
        BitmapDeviceSharedPtr pBmp( createBitmapDevice( rDevice->getSize(),
                                                        true,
                                                        Format::EIGHT_BIT_GREY ));

        ::rtl::OUString aSvg = ::rtl::OUString::createFromAscii(
            "m 0 0h5v10h5v-5h-10z" );

        basegfx::B2DPolyPolygon aPoly;
        basegfx::tools::importFromSvgD( aPoly, aSvg, false, NULL );
        const basebmp::Color aCol(0xFF);
        pBmp->clear( basebmp::Color(0) );
        pBmp->fillPolyPolygon(
            aPoly,
            aCol,
            basebmp::DrawMode_PAINT );

        const basegfx::B2IRange aSourceRect(0,0,10,10);
        const basegfx::B2IPoint aDestLeftTop(0,0);
        const Color aCol2(0xF0F0F0F0);
        rDevice->drawMaskedColor(
            aCol2,
            pBmp,
            aSourceRect,
            aDestLeftTop,
            mpClipMask );
        const basegfx::B2IPoint aPt(1,1);
        ASSERT_TRUE(countPixel( rDevice, rDevice->getPixel(aPt) ) == 41)
            << "number of rendered pixel is not 41";

    }

public:
    virtual void SetUp()
    {
        const basegfx::B2ISize aSize(11,11);
        mpClipMask = createBitmapDevice( aSize,
                                         true,
                                         Format::ONE_BIT_MSB_GREY );
        mpDevice1bpp = createBitmapDevice( aSize,
                                           true,
                                           Format::ONE_BIT_MSB_PAL );
        mpDevice32bpp = createBitmapDevice( aSize,
                                           true,
                                           Format::THIRTYTWO_BIT_TC_MASK );

        ::rtl::OUString aSvg = ::rtl::OUString::createFromAscii(
            "m 0 0 h5 l5 5 v5 h-5 l-5-5 z" );
        basegfx::B2DPolyPolygon aPoly;
        basegfx::tools::importFromSvgD( aPoly, aSvg, false, NULL );
        mpClipMask->clear(Color(0));
        mpClipMask->drawPolygon(
            aPoly.getB2DPolygon(0),
            Color(0xFFFFFFFF),
            DrawMode_PAINT );
    }
};

TEST_F(ClipTest, testPixelClip)
{
    implTestPixelClip( mpDevice1bpp );
    implTestPixelClip( mpDevice32bpp );
}

TEST_F(ClipTest, testLineClip)
{
    implTestLineClip( mpDevice1bpp );
    implTestLineClip( mpDevice32bpp );
}

TEST_F(ClipTest, testFillClip)
{
    implTestFillClip( mpDevice1bpp );
    implTestFillClip( mpDevice32bpp );
}

TEST_F(ClipTest, testBmpClip)
{
    implTestBmpClip( mpDevice1bpp );
    implTestBmpClip( mpDevice32bpp );
}

TEST_F(ClipTest, testMaskColorClip)
{
    implTestMaskColorClip( mpDevice1bpp );
    implTestMaskColorClip( mpDevice32bpp );
}


}
