/**************************************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 *************************************************************/

// autogenerated file with codegen.pl

#include "preextstl.h"
#include "gtest/gtest.h"
#include "postextstl.h"

#include <o3tl/vector_pool.hxx>

using namespace ::o3tl;

class vector_pool_test : public ::testing::Test
{
public:
};

TEST_F(vector_pool_test, testPoolBasics)
{
    vector_pool<int> aPool;

    std::ptrdiff_t nIdx1 = aPool.alloc();
    std::ptrdiff_t nIdx2 = aPool.alloc();
    std::ptrdiff_t nIdx3 = aPool.alloc();

    ASSERT_TRUE(nIdx1 < nIdx2) << "allocator idx order 1";
    ASSERT_TRUE(nIdx2 < nIdx3) << "allocator idx order 2";

    aPool.free(nIdx2);
    aPool.free(nIdx3);

    nIdx2 = aPool.alloc();
    nIdx3 = aPool.alloc();

    ASSERT_TRUE(nIdx1 < nIdx3) << "allocator idx order 1 after fragmentation";
    ASSERT_TRUE(nIdx3 < nIdx2) << "allocator idx order 2 after fragmentation";
}

TEST_F(vector_pool_test, testPoolValueSemantics)
{
    vector_pool<int> aPool;

    std::ptrdiff_t nIdx1 = aPool.store(0);
    ASSERT_TRUE(aPool.get(nIdx1) == 0) << "allocator value semantics 1";

    std::ptrdiff_t nIdx2 = aPool.store(1);
    ASSERT_TRUE(aPool.get(nIdx2) == 1) << "allocator value semantics 2";

    std::ptrdiff_t nIdx3 = aPool.store(2);
    ASSERT_TRUE(aPool.get(nIdx3) == 2) << "allocator value semantics 3";

    aPool.free(nIdx2);
    aPool.free(nIdx3);

    nIdx2 = aPool.store(1);
    ASSERT_TRUE(aPool.get(nIdx2) == 1) << "allocator value semantics 2 after fragmentation";

    nIdx3 = aPool.store(2);
    ASSERT_TRUE(aPool.get(nIdx3) == 2) << "allocator value semantics 3 after fragmentation";
}

